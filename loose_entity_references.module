<?php
/**
 * @file
 *  Main file for this module. contain all the hook implementations.
 */
/**
 * Register my special autoload that handle MY namespaces for THIS module only,
 * to avoid undesired side-effects.
 */
spl_autoload_register(function ($class) {
  $class = explode('\\', $class);
  if ($class[0] == 'kanethornwyrd' && $class[1] == 'loose_entity_references') {
    $filepath = __DIR__ . '/classes/' . implode('/', array_slice($class, 2)) . '.php';
    if (file_exists($filepath)) {
      require_once $filepath;
    }
  }
}, TRUE, TRUE);

use kanethornwyrd\loose_entity_references\ToolBox;
use kanethornwyrd\loose_entity_references\DataGateway;

/**
 * Implements hook_entity_load().
 *
 * Cheap workaround to have the entity type and the bundle name inside the
 * entity.
 */
function loose_entity_references_entity_load($entities, $type) {
  foreach ($entities as $id => $entity) {
    if (empty($entity->entity_type)) {
      $entities[$id]->entity_type = $type;
    }
    if (!empty($entity->entity_type) && empty($entity->bundle)) {
      list($id, $vid, $bundle) = entity_extract_ids($entity->entity_type,
      $entity);
      $entities[$id]->bundle = $bundle;
    }
  }

}
define('LOOSE_ENTITY_REFERENCES_CRUCIAL_FIELDS',
serialize(
array(
  'entity_type',
  'bundle',
  'field_name',
  'display',
)));


/**
 * ===============FIELD DEFINITION====================
 */

/**
 * Implements hook_field_info().
 */
function loose_entity_references_field_info() {
  return array(
    'loose_entity_reference' => array(
      'label'             => t('Loose Entity Reference'),
      'description'       => t('This field store a value referencing one or multiple entities by the hypothetical value of one of their fields. Entities don\'t have to exist.'),
      'default_widget'    => 'loose_entity_reference_textfield',
      'default_formatter' => 'loose_entity_reference_default',
    ),
  );

}
/**
 * Implements hook_field_validate();
 */
//function loose_entity_references_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//  foreach ($items as $delta => $item) {
//    if (!loose_entity_references_field_is_empty($item, $field)) {
//      foreach (unserialize(LOOSE_ENTITY_REFERENCES_CRUCIAL_FIELDS) as $data_field) {
//        if (!preg_match('@^(\w|\d|-|_)+$@', $item[$data_field])) {
//          $errors[$field['field_name']][$langcode][$delta][] = array(
//            'error'   => 'field_loose_entity_references_invalid',
//            'message' => t('Loose Reference to entities can\'t be achieved with non alpha-numeric datas. Seek the @field field value for the error',
//            array('@field' => $field['field_name'])),
//          );
//        }
//      }
//    }
//  }
//
//}

/**
 * Implements hook_field_is_empty().
 */
function loose_entity_references_field_is_empty($item, $field) {
//  foreach (unserialize(LOOSE_ENTITY_REFERENCES_CRUCIAL_FIELDS) as $data_field) {
//    if (empty($item[$data_field])) {
//      return TRUE;
//    }
//  }
  return empty($item['field_value']);

}
/**
 * ===============FIELD FORMATER DEFINITION====================
 */

/**
 * Implements hook_field_formatter_info().
 */
function loose_entity_references_field_formatter_info() {
  return array(
    'loose_entity_reference_default' => array(
      'label'       => t('Default'),
      'field types' => array('loose_entity_reference'),
    ),
    'loose_entity_reference_rawdata' => array(
      'label'       => t('Raw Data'),
      'field types' => array('loose_entity_reference'),
    ),
  );

}
/**
 * Implements hook_field_formatter_prepare_view().
 */
//function loose_entity_references_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
//
//  dpm(func_get_args(), 'formatter_prepare_view');
//  $element = array();
//  $instance_settings = $instance['widget']['settings'];
//
//  $settings = ToolBox::targetStringToArrayExtractor($instance_settings['target']['entity_bundle_field'],
//  'settingArrayToClass');
//  $settings->display = $instance_settings['target']['entity_bundle_display'];
//
//  switch ($display['type']) {
//    case 'loose_entity_reference_default':
//      foreach ($items as $delta => $item) {
//        $matches = DataGateway::getMatchingEntities($settings->entity_type,
//        $settings->bundle, $settings->field, $item['field_value']);
//        $element[$delta] = entity_view(
//        $settings->entity_type, $matches, $settings->display, NULL, FALSE);
//      }
//  }
//  return $element;
//
//}

/**
 * Implements hook_field_formatter_view().
 */
function loose_entity_references_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $instance_settings = $instance['widget']['settings'];

  $settings = ToolBox::targetStringToArrayExtractor($instance_settings['target']['entity_bundle_field'],
  'settingArrayToClass');
  $settings->display = $instance_settings['target']['entity_bundle_display'];

  switch ($display['type']) {
    case 'loose_entity_reference_default':
      foreach ($items as $delta => $item) {
        $matches = DataGateway::getMatchingEntities($settings->entity_type,
        $settings->bundle, $settings->field, $item['field_value']);
        $element[$delta] = entity_view(
        $settings->entity_type, $matches, $settings->display, NULL, FALSE);
      }
      break;
    case 'loose_entity_reference_rawdata':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['field_value']);
      }


      break;
  }
  return $element;

}
/**
 * ===============FIELD WIDGET DEFINITION====================
 */

/**
 * Implements hook_field_widget_info();
 */
function loose_entity_references_field_widget_info() {
  return array(
    'loose_entity_reference_textfield' => array(
      'label'       => t('Loose Entity Reference'),
      'field types' => array('loose_entity_reference'),
    ),
  );

}

/**
 * Implements hook_field_widget_form();
 */
function loose_entity_references_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['field_value'])
  ? $items[$delta]['field_value']
  : '';

  $widget = $element;
  $widget['#delta'] = $delta;


  switch ($instance['widget']['type']) {

    case 'loose_entity_reference_textfield':
      $widget += array(
        '#type'          => 'textfield',
        '#default_value' => $value,
      );

      break;
  }

  $element['field_value'] = $widget;

  return $element;

}

/**
 * Implements hook_field_widget_settings_form().
 */
function loose_entity_references_field_widget_settings_form($field, $instance) {
  $form = &drupal_static(__FUNCTION__);
  if (!isset($form)) {
    $widget = $instance['widget'];
    $settings = $widget['settings'];

    $form = array();

    $form['target'] = array(
      '#type' => 'fieldset',
    );

    if (!isset($form['target']['#element_validate']) || !is_array($form['target']['#element_validate'])) {
      $form['target']['#element_validate'] = array();
    }

    $fields_selects = array();
    $displays_selects = array();

    $entity_info = entity_get_info();
    foreach ($entity_info as $entity_type_machinename => $entity_type) {
      $fields_selects[$entity_type_machinename] = isset($fields_selects[$entity_type_machinename])
      ? $fields_selects[$entity_type_machinename]
      : array();
      $displays_selects[$entity_type_machinename] = isset($displays_selects[$entity_type_machinename])
      ? $displays_selects[$entity_type_machinename]
      : array();
      foreach ($entity_type['bundles'] as $bundle_machinename => $bundle) {
//        dpm($bundle);

        $fields_info = field_info_instances($entity_type_machinename,
        $bundle_machinename);
        foreach ($fields_info as $field_mn => $value) {
          $fields_selects[$entity_type_machinename]["{$entity_type_machinename}[{$bundle_machinename}][{$field_mn}]"] = "{$bundle['label']} : {$value['label']}";
        }
        $displays = field_view_mode_settings($entity_type_machinename,
        $bundle_machinename);
        foreach ($displays as $display_mn => $value) {
          $displays_selects[$entity_type_machinename . ' | ' . $bundle_machinename][$display_mn] = $display_mn;
        }
      }
      if (empty($fields_selects[$entity_type_machinename])) {
        unset($fields_selects[$entity_type_machinename]);
      }
      if (empty($displays_selects[$entity_type_machinename])) {
        unset($displays_selects[$entity_type_machinename]);
      }
    }

    $form['target']['entity_bundle_field'] = array(
      '#type'                                  => 'select',
      '#title'                                 => t('Targeted Entity → Bundle → Field'),
      '#options'                               => $fields_selects,
      '#required'                              => TRUE,
    );
    $form['target']['entity_bundle_display'] = array(
      '#type'     => 'select',
      '#title'    => t('Targeted Entity → Bundle → Display'),
      '#options'  => $displays_selects,
      '#required' => TRUE,
    );

    if (!empty($settings['target']['entity_bundle_field'])) {
      $form['target']['entity_bundle_field']['#default_value'] = $settings['target']['entity_bundle_field'];
    }
    if (!empty($settings['target']['entity_bundle_display'])) {
      $form['target']['entity_bundle_display']['#default_value'] = $settings['target']['entity_bundle_display'];
    }
  }

  return $form;

}

/**
 * Implements hook_form_alter().
 *
 * Hide unwanted elements in the field instance settings form.
 */
function loose_entity_references_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  //Simple check to be sure to really be in our field instance settings form.
  if ($form['#field']['type'] == 'loose_entity_reference') {

    unset($form['instance']['default_value_widget']);

    //That'ss the "Help text", by the way we can't unset it completly, because
    //of the Token module :/
    $form['instance']['description']['#type'] = 'hidden';
  }

}
/**
 * ===============ENTITY INTERCEPTION====================
 */

/**
 * Implements hook_entity_insert();
 */
function loose_entity_references_entity_insert($entity, $type) {
  if (DataGateway::isEntityTargetable($entity)) {
    dpm($entity);
    DataGateway::insertEntityInRegistry($entity);
  }

}

/**
 * Implements hook_entity_update();
 */
function loose_entity_references_entity_update($entity, $type) {
  if (DataGateway::isEntityTargetable($entity)) {
    DataGateway::insertEntityInRegistry($entity);
  }

}

/**
 * Implements hook_entity_delete();
 */
function loose_entity_references_entity_delete($entity, $type) {
  DataGateway::deleteEntityInRegistry($entity);
}

/**
 * Implements hook_field_insert();
 */
function loose_entity_references_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  dpm(func_get_args(), 'field_insert');
  dpm(DataGateway::getLooseEntityReferenceFieldsSettings(), 'field_insert');

}

/**
 * Implements hook_block_info();
 */
function loose_entity_references_block_info() {
  $blocks = array();

  $blocks['retarget'] = array(
    'info'  => t('Retarget'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;

}

/**
 * Implements hook_block_view();
 */
function loose_entity_references_block_view($delta = '') {
  switch ($delta) {
    case 'retarget':
      return array(
        'subject' => NULL,
        'content' => array(
          '#type'       => 'html_tag',
          '#tag'        => 'a',
          '#attributes' => array(
            'href'   => '/retarget'
          ),
          '#value' => t('Retarget'),
        )
      );

      break;

    default:
      break;
  }

}

/**
 * Implements hook_menu();
 */
function loose_entity_references_menu() {
  $items = array();
  $items['retarget'] = array(
    'title' => 'ffffff',
    'access callback' => TRUE,
    'page callback' => 'retarget_cb',
    'page arguments' => array(1),
  );
  return $items;

}

function retarget_cb(){
  $settings = DataGateway::getLooseEntityReferenceFieldsSettings();
  DataGateway::insertTargetingDatas($settings);
  drupal_goto();
}